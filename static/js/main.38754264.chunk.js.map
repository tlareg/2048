{"version":3,"sources":["core.js","App.js","serviceWorker.js","index.js"],"names":["DIRECTIONS","directionByKey","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","tileKey","x","y","setVal","tiles","key","val","addNewTile","size","emptyTilesKeys","keys","push","getEmptyTilesKeys","Math","floor","random","length","moveTileIfNeeded","newTiles","getAheadXY","currentTileKey","aheadX","aheadY","aheadTileKey","newAheadCoords","Tile","className","Tiles","Array","fill","map","_v","Board","useState","initTiles","setTiles","useEffect","handleKeyDown","e","direction","moveTiles","tilesA","tilesB","areTilesEqual","document","addEventListener","removeEventListener","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38754264.chunk.js","sourcesContent":["export const BOARD_SIZE = 4;\r\n\r\nexport const EMPTY = \"EMPTY\";\r\n\r\nconst DIRECTIONS = {\r\n  UP: \"up\",\r\n  DOWN: \"down\",\r\n  RIGHT: \"right\",\r\n  LEFT: \"left\",\r\n};\r\n\r\nexport const directionByKey = {\r\n  ArrowUp: DIRECTIONS.UP,\r\n  ArrowDown: DIRECTIONS.DOWN,\r\n  ArrowRight: DIRECTIONS.RIGHT,\r\n  ArrowLeft: DIRECTIONS.LEFT,\r\n};\r\n\r\nexport const tileKey = (x, y) => `x${x}y${y}`;\r\n\r\nconst setVal = ({ tiles, x, y, key, val }) => ({\r\n  ...tiles,\r\n  [key || tileKey(x, y)]: val,\r\n});\r\n\r\nexport const areTilesEqual = (tilesA, tilesB, size) => {\r\n  for (let x = 0; x < size; x++) {\r\n    for (let y = 0; y < size; y++) {\r\n      let key = tileKey(x, y);\r\n      if (tilesA[key] !== tilesB[key]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst getEmptyTilesKeys = (tiles, size) => {\r\n  const keys = [];\r\n\r\n  for (let x = 0; x < size; x++) {\r\n    for (let y = 0; y < size; y++) {\r\n      let key = tileKey(x, y);\r\n      if (tiles[key] === EMPTY) {\r\n        keys.push(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  return keys;\r\n};\r\n\r\nexport const addNewTile = (tiles, size) => {\r\n  const emptyTilesKeys = getEmptyTilesKeys(tiles, size);\r\n  const key = emptyTilesKeys[Math.floor(Math.random() * emptyTilesKeys.length)];\r\n  const val = Math.random() < 0.9 ? 2 : 4;\r\n  return setVal({ tiles, key, val });\r\n};\r\n\r\nexport const initTiles = (size) => {\r\n  let tiles = {};\r\n  for (let x = 0; x < size; x++) {\r\n    for (let y = 0; y < size; y++) {\r\n      tiles = setVal({ tiles, x, y, val: EMPTY });\r\n    }\r\n  }\r\n\r\n  // add 2 tiles to initial board\r\n  tiles = addNewTile(tiles, size);\r\n  tiles = addNewTile(tiles, size);\r\n\r\n  return tiles;\r\n};\r\n\r\nconst moveTileIfNeeded = ({ newTiles, x, y, getAheadXY }) => {\r\n  let currentTileKey = tileKey(x, y);\r\n  let { x: aheadX, y: aheadY } = getAheadXY(x, y);\r\n  let aheadTileKey = tileKey(aheadX, aheadY);\r\n\r\n  // if tile is empty, we dont need to move it anywhere\r\n  if (newTiles[currentTileKey] === EMPTY) return newTiles;\r\n\r\n  // if tile is not empty,\r\n  // move it while ahead tile is not board edge and empty\r\n  while (newTiles[aheadTileKey] && newTiles[aheadTileKey] === EMPTY) {\r\n    // move tile ahead and clear current position\r\n    newTiles = {\r\n      ...newTiles,\r\n      [aheadTileKey]: newTiles[currentTileKey],\r\n      [currentTileKey]: EMPTY,\r\n    };\r\n\r\n    // update current tile pointer\r\n    currentTileKey = aheadTileKey;\r\n\r\n    // update ahead tile pointer\r\n    const newAheadCoords = getAheadXY(aheadX, aheadY);\r\n    aheadX = newAheadCoords.x;\r\n    aheadY = newAheadCoords.y;\r\n    aheadTileKey = tileKey(aheadX, aheadY);\r\n  }\r\n\r\n  // if next tile is not empty and tiles has same value, sum tiles\r\n  if (newTiles[currentTileKey] === newTiles[aheadTileKey]) {\r\n    // save sum ahead and clear current position\r\n    return {\r\n      ...newTiles,\r\n      [aheadTileKey]: newTiles[currentTileKey] + newTiles[aheadTileKey],\r\n      [currentTileKey]: EMPTY,\r\n    };\r\n  }\r\n\r\n  return newTiles;\r\n};\r\n\r\nexport const moveTiles = ({ direction, tiles, size }) => {\r\n  let newTiles = { ...tiles };\r\n\r\n  if (direction === DIRECTIONS.UP) {\r\n    for (let x = 0; x < size; x++) {\r\n      for (let y = 0; y < size; y++) {\r\n        if (y - 1 < 0) continue;\r\n\r\n        newTiles = moveTileIfNeeded({\r\n          newTiles,\r\n          x,\r\n          y,\r\n          getAheadXY: (x, y) => ({ x, y: y - 1 }),\r\n        });\r\n      }\r\n    }\r\n    return newTiles;\r\n  }\r\n\r\n  if (direction === DIRECTIONS.DOWN) {\r\n    for (let x = 0; x < size; x++) {\r\n      for (let y = size - 1; y >= 0; y--) {\r\n        if (y + 1 > size - 1) continue;\r\n\r\n        newTiles = moveTileIfNeeded({\r\n          newTiles,\r\n          x,\r\n          y,\r\n          getAheadXY: (x, y) => ({ x, y: y + 1 }),\r\n        });\r\n      }\r\n    }\r\n    return newTiles;\r\n  }\r\n\r\n  if (direction === DIRECTIONS.RIGHT) {\r\n    for (let x = size - 1; x >= 0; x--) {\r\n      for (let y = 0; y < size; y++) {\r\n        if (x + 1 > size - 1) continue;\r\n\r\n        newTiles = moveTileIfNeeded({\r\n          newTiles,\r\n          x,\r\n          y,\r\n          getAheadXY: (x, y) => ({ x: x + 1, y }),\r\n        });\r\n      }\r\n    }\r\n    return newTiles;\r\n  }\r\n\r\n  if (direction === DIRECTIONS.LEFT) {\r\n    for (let x = 0; x < size; x++) {\r\n      for (let y = 0; y < size; y++) {\r\n        if (x - 1 < 0) continue;\r\n\r\n        newTiles = moveTileIfNeeded({\r\n          newTiles,\r\n          x,\r\n          y,\r\n          getAheadXY: (x, y) => ({ x: x - 1, y }),\r\n        });\r\n      }\r\n    }\r\n    return newTiles;\r\n  }\r\n\r\n  return tiles;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  EMPTY,\n  BOARD_SIZE,\n  tileKey,\n  directionByKey,\n  initTiles,\n  moveTiles,\n  addNewTile,\n  areTilesEqual,\n} from \"./core\";\n\nconst Tile = ({ val }) => (\n  <div className={`tile tile-${val}`}>{val === EMPTY ? \"\" : `${val}`}</div>\n);\n\nconst Tiles = ({ tiles, size }) =>\n  Array(size)\n    .fill()\n    .map((_v, y) => (\n      <div key={y} className=\"row\">\n        {Array(size)\n          .fill()\n          .map((_v, x) => (\n            <Tile key={tileKey(x, y)} val={tiles[tileKey(x, y)]} />\n          ))}\n      </div>\n    ));\n\nconst Board = () => {\n  const size = BOARD_SIZE;\n  const [tiles, setTiles] = useState(initTiles(size));\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const direction = directionByKey[e.key];\n\n      // update only when direction keys pressed\n      if (!direction) return;\n\n      let newTiles = moveTiles({\n        tiles,\n        size,\n        direction,\n      });\n\n      // should add new random tile only if tiles moved after user action\n      if (!areTilesEqual(tiles, newTiles, size)) {\n        newTiles = addNewTile(newTiles, size);\n      }\n\n      setTiles(newTiles);\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [tiles, size]);\n\n  return (\n    <div className=\"board\">\n      <Tiles tiles={tiles} size={size} />\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>2048</h1>\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}